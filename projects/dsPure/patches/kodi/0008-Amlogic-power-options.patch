From 0664e548325466f3361fce9d58b2b76aec783ccd Mon Sep 17 00:00:00 2001
From: Stanislav Vlasic <svlasic@gmail.com>
Date: Wed, 6 Jul 2016 02:10:43 +0200
Subject: [PATCH] Amlogic power options

---
 configure.ac                                   |  53 ++++++++++
 xbmc/powermanagement/PowerManager.cpp          |   7 +-
 xbmc/powermanagement/linux/AMLPowerSyscall.cpp | 128 +++++++++++++++++++++++++
 xbmc/powermanagement/linux/AMLPowerSyscall.h   |  51 ++++++++++
 xbmc/powermanagement/linux/CMakeLists.txt      |   6 +-
 xbmc/powermanagement/linux/Makefile            |   3 +-
 6 files changed, 243 insertions(+), 5 deletions(-)
 create mode 100644 xbmc/powermanagement/linux/AMLPowerSyscall.cpp
 create mode 100644 xbmc/powermanagement/linux/AMLPowerSyscall.h

diff --git a/configure.ac b/configure.ac
index daec619..d388375 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1291,6 +1291,59 @@ else
   AC_MSG_RESULT($x11_disabled)
 fi
 
+# Amlogic Power options
+AC_ARG_ENABLE([powerdown],
+  [AS_HELP_STRING([--enable-powerdown],
+  [enable powerdown option (default is no)])],
+  [has_power=$enableval],
+  [has_power=no])
+
+if test "$has_power" = "yes"; then
+  HAS_POWERDOWN=1
+  AC_DEFINE([XBMC_POWERDOWN], [1], [Whether the system can preform powerdown.])
+else
+  HAS_POWERDOWN=0
+fi
+
+AC_ARG_ENABLE([suspend],
+  [AS_HELP_STRING([--enable-suspend],
+  [enable suspend option (default is no)])],
+  [has_suspend=$enableval],
+  [has_suspend=no])
+
+if test "$has_suspend" = "yes"; then
+  HAS_SUSPEND=1
+  AC_DEFINE([XBMC_SUSPEND], [1], [Whether the system can preform suspend.])
+else
+  HAS_SUSPEND=0
+fi
+
+AC_ARG_ENABLE([hibernate],
+  [AS_HELP_STRING([--enable-hibernate],
+  [enable hibernate option (default is no)])],
+  [has_hibernate=$enableval],
+  [has_hibernate=no])
+
+if test "$has_hibernate" = "yes"; then
+  HAS_HIBERNATE=1
+  AC_DEFINE([XBMC_HIBERNATE], [1], [Whether the system can preform hibernate.])
+else
+  HAS_HIBERNATE=0
+fi
+
+AC_ARG_ENABLE([reboot],
+  [AS_HELP_STRING([--enable-reboot],
+  [enable reboot option (default is no)])],
+  [has_reboot=$enableval],
+  [has_reboot=no])
+
+if test "$has_reboot" = "yes"; then
+  HAS_REBOOT=1
+  AC_DEFINE([XBMC_REBOOT], [1], [Whether the system can preform reboot.])
+else
+  HAS_REBOOT=0
+fi
+
 # libssh
 if test "x$use_ssh" = "xno"; then
   AC_MSG_NOTICE(ssh support disabled by user)
diff --git a/xbmc/powermanagement/PowerManager.cpp b/xbmc/powermanagement/PowerManager.cpp
index 33c4eb4..a5a7b8b 100644
--- a/xbmc/powermanagement/PowerManager.cpp
+++ b/xbmc/powermanagement/PowerManager.cpp
@@ -50,6 +50,7 @@
 #include "linux/ConsoleDeviceKitPowerSyscall.h"
 #include "linux/LogindUPowerSyscall.h"
 #include "linux/UPowerSyscall.h"
+#include "linux/AMLPowerSyscall.h"
 #endif // HAS_DBUS
 #elif defined(TARGET_WINDOWS)
 #include "powermanagement/windows/Win32PowerSyscall.h"
@@ -88,14 +89,16 @@ void CPowerManager::Initialize()
   std::list< std::pair< std::function<bool()>,
                         std::function<IPowerSyscall*()> > > powerManagers =
   {
-    std::make_pair(CConsoleUPowerSyscall::HasConsoleKitAndUPower,
+    /*std::make_pair(CConsoleUPowerSyscall::HasConsoleKitAndUPower,
                    [] { return new CConsoleUPowerSyscall(); }),
     std::make_pair(CConsoleDeviceKitPowerSyscall::HasDeviceConsoleKit,
                    [] { return new CConsoleDeviceKitPowerSyscall(); }),
     std::make_pair(CLogindUPowerSyscall::HasLogind,
                    [] { return new CLogindUPowerSyscall(); }),
     std::make_pair(CUPowerSyscall::HasUPower,
-                   [] { return new CUPowerSyscall(); })
+                   [] { return new CUPowerSyscall(); }),*/
+    std::make_pair(CAMLPowerSyscall::HasAMLPowerSyscall,
+                   [] { return new CAMLPowerSyscall(); })
   };
   for(const auto& powerManager : powerManagers)
   {
diff --git a/xbmc/powermanagement/linux/AMLPowerSyscall.cpp b/xbmc/powermanagement/linux/AMLPowerSyscall.cpp
new file mode 100644
index 0000000..b0f9600
--- /dev/null
+++ b/xbmc/powermanagement/linux/AMLPowerSyscall.cpp
@@ -0,0 +1,128 @@
+/*
+ *      Copyright (C) 2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "system.h"
+#include "utils/SysfsUtils.h"
+#include "AMLPowerSyscall.h"
+#include "utils/AMLUtils.h"
+#include "utils/log.h"
+
+CAMLPowerSyscall::CAMLPowerSyscall()
+{
+#ifdef XBMC_POWERDOWN
+    m_CanPowerdown = true;
+#else
+    m_CanPowerdown = false;
+#endif
+#ifdef XBMC_SUSPEND
+    m_CanSuspend   = true;
+#else
+    m_CanSuspend   = false;
+#endif
+#ifdef XBMC_HIBERNATE
+  m_CanHibernate = true;
+#else
+  m_CanHibernate = false;
+#endif
+#ifdef XBMC_REBOOT
+  m_CanReboot    = true;
+#else
+  m_CanReboot    = false;
+#endif
+
+  m_OnResume  = false;
+  m_OnSuspend = false;
+}
+
+bool CAMLPowerSyscall::Powerdown()
+{
+  return true;
+}
+
+bool CAMLPowerSyscall::Suspend()
+{
+  m_OnSuspend = true;
+  return true;
+}
+
+bool CAMLPowerSyscall::Hibernate()
+{
+  return false;
+}
+
+bool CAMLPowerSyscall::Reboot()
+{
+  return true;
+}
+
+bool CAMLPowerSyscall::CanPowerdown()
+{
+  return m_CanPowerdown;
+}
+
+bool CAMLPowerSyscall::CanSuspend()
+{
+  return m_CanSuspend;
+}
+
+bool CAMLPowerSyscall::CanHibernate()
+{
+  return m_CanHibernate;
+}
+
+bool CAMLPowerSyscall::CanReboot()
+{
+  return m_CanReboot;
+}
+
+int CAMLPowerSyscall::BatteryLevel()
+{
+  return 0;
+}
+
+bool CAMLPowerSyscall::PumpPowerEvents(IPowerEventsCallback *callback)
+{
+  bool bSuspended = false;
+  if (m_OnSuspend)
+  {
+    // do the CPowerManager::OnSleep() callback
+    callback->OnSleep();
+    m_OnResume  = true;
+    m_OnSuspend = false;
+    bSuspended = true;
+    // wait for all our threads to do their thing
+    usleep(1 * 1000 * 1000);
+    system("/sbin/gxb_suspend.sh");
+    usleep(100 * 1000);
+  }
+  if ((m_OnResume) && (!bSuspended))
+  {
+    // do the CPowerManager::OnWake() callback
+    callback->OnWake();
+    m_OnResume = false;
+  }
+
+  return true;
+}
+
+bool CAMLPowerSyscall::HasAMLPowerSyscall()
+{
+  return aml_present();
+}
diff --git a/xbmc/powermanagement/linux/AMLPowerSyscall.h b/xbmc/powermanagement/linux/AMLPowerSyscall.h
new file mode 100644
index 0000000..9af7beb
--- /dev/null
+++ b/xbmc/powermanagement/linux/AMLPowerSyscall.h
@@ -0,0 +1,51 @@
+/*
+ *      Copyright (C) 2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "powermanagement/IPowerSyscall.h"
+
+class CAMLPowerSyscall : public CPowerSyscallWithoutEvents
+{
+public:
+  CAMLPowerSyscall();
+  virtual ~CAMLPowerSyscall() {}
+
+  virtual bool Powerdown();
+  virtual bool Suspend();
+  virtual bool Hibernate();
+  virtual bool Reboot();
+
+  virtual bool CanPowerdown();
+  virtual bool CanSuspend();
+  virtual bool CanHibernate();
+  virtual bool CanReboot();
+  virtual int  BatteryLevel();
+  virtual bool PumpPowerEvents(IPowerEventsCallback *callback);
+
+  static bool HasAMLPowerSyscall();
+
+private:
+  bool m_CanPowerdown;
+  bool m_CanSuspend;
+  bool m_CanHibernate;
+  bool m_CanReboot;
+
+  bool m_OnResume;
+  bool m_OnSuspend;
+};
diff --git a/xbmc/powermanagement/linux/CMakeLists.txt b/xbmc/powermanagement/linux/CMakeLists.txt
index 86bb935..c91dd29 100644
--- a/xbmc/powermanagement/linux/CMakeLists.txt
+++ b/xbmc/powermanagement/linux/CMakeLists.txt
@@ -1,12 +1,14 @@
 set(SOURCES ConsoleDeviceKitPowerSyscall.cpp
             ConsoleUPowerSyscall.cpp
             UPowerSyscall.cpp
-            LogindUPowerSyscall.cpp)
+            LogindUPowerSyscall.cpp
+            AMLPowerSyscall.cpp)
 
 set(HEADERS ConsoleDeviceKitPowerSyscall.h
             ConsoleUPowerSyscall.h
             FallbackPowerSyscall.h
             LogindUPowerSyscall.h
-            UPowerSyscall.h)
+            UPowerSyscall.h
+            AMLPowerSyscall.h)
 
 core_add_library(powermanagement_linux)
diff --git a/xbmc/powermanagement/linux/Makefile b/xbmc/powermanagement/linux/Makefile
index e9d95fb..2268256 100644
--- a/xbmc/powermanagement/linux/Makefile
+++ b/xbmc/powermanagement/linux/Makefile
@@ -1,7 +1,8 @@
 SRCS=ConsoleDeviceKitPowerSyscall.cpp \
      ConsoleUPowerSyscall.cpp \
      UPowerSyscall.cpp \
-     LogindUPowerSyscall.cpp
+     LogindUPowerSyscall.cpp \
+     AMLPowerSyscall.cpp
 
 LIB=powermanagement_linux.a
 
-- 
2.6.6

